<p>Pattern matching on generalized algebraic datatypes is a complicated problem, and has seen many attempts at a solution in recent years. Pattern matching on ordinary ADTs is often simply mentioned as a trivial matter and delegated to a footnoote. When I recently had to implement a coverage checking algorithm in a Haskell-like language <em>without</em> GADTs, I found that there was a dearth of information (which was not paywalled) on how to go about such a problem. This blog post is my attempt at rectifying this state of affairs for those that come after me!</p>
<p>First, we must define a simple language to work with</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">newtype</span> <span class="dt">Ident</span> <span class="fu">=</span> {<span class="ot"> unIdent ::</span> <span class="dt">String</span> }</a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="kw">data</span> <span class="dt">Expr</span> <span class="fu">=</span> <span class="dt">Var</span> <span class="dt">Ident</span> <span class="fu">|</span> <span class="dt">Lam</span> <span class="dt">Ident</span> <span class="dt">Type</span> <span class="dt">Expr</span> <span class="fu">|</span> <span class="dt">App</span> <span class="dt">Expr</span> <span class="dt">Expr</span></a></code></pre></div>
